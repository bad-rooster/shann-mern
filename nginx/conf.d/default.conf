# Define a zone for rate limiting
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=3r/s;

# HTTP server - redirects to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name badroosterdevbox.space www.badroosterdevbox.space;

    # Redirect all HTTP requests to HTTPS
    return 301 https://$host$request_uri;
}

# HTTPS server
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name badroosterdevbox.space www.badroosterdevbox.space;

    # SSL certificate configuration
    ssl_certificate /etc/nginx/certs/domain.cert.pem;     # Update this path
    ssl_certificate_key /etc/nginx/certs/private.key.pem;     # Update this path

    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;

    # Original proxy configurations for frontend
    location / {
        # Apply rate limiting
        limit_req zone=api_limit burst=6 nodelay;

        proxy_pass http://frontend:5173;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Original proxy configurations for backend
    location /api {
        # Apply rate limiting
        limit_req zone=api_limit burst=6 nodelay;

        proxy_pass http://backend:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}